def readFile(fi):
    # with open(fi, 'r') as f:
    #     rd = csv.reader(f)
    # return list(rd)
    f = open(fi, 'r')
    rd = csv.reader(f)
    return list(rd)
    f.close()

def cleanData(fi):
    cl = list()
    for f in fi:
        f = [x for x in f if x != '']
        cl.append(f)
    return cl

def findFiter(cl, ms):
    # finding all the itemsets of size 1 and their support.
    fr = dict()
    greaterThanMin = list()
    for c in cl:
        for d in c:
            if d in fr:
                fr[d] += 1
            else:
                fr[d] = 1
    # keep only the itemsets with support 0.6
    for f in fr:
        # support -> occurence / number of trans
        if float(fr[f]/len(cl)) >= float(ms):
            greaterThanMin.append(f)
    return greaterThanMin

def generateUnique(fq):
    uniqueList = list()
    for f in fq:
        for q in f:
            if q not in uniqueList:
                uniqueList.append(q)
    return uniqueList

def makeCombination(ft, si):
    cb = list(combinations(ft,si))
    for c in range(0, len(cb)):
        temp = list(cb[c])
        cb[c] = temp
    return cb

def findSup(cl, ft, ms, si):
    # making combination
    cb = makeCombination(ft,si)
    # print('size {} : {}'.format(si, cb))
    if len(cb)!=0:
        temp = list()
        for c in range(0, len(cb)):
            fr = 0
            for d in cl:
                count = 0
                for e in range(0, len(cb[c])):
                    if cb[c][e] in d:
                        count+=1
                    else:
                        count = 0
                    if count == len(cb[c]):
                        fr+=1
            if fr/len(cl) >= ms:
                temp.append(cb[c])
        uniqueEl = generateUnique(temp)
        ft = uniqueEl
        return findSup(cl,ft, ms,si+1)
    else:
        return ft

def findConVal(sa, ta, cl):
    # count the occurence of (sa and ta) as one list in cl ->upr 'upper'
    upr = 0
    blw = 0
    # combining the list
    temp = sa + ta
    for c in cl:
        flag = 0
        blwFlag = 0
        for t in temp:
            if t in c:
                flag+=1
            else:
                flag=0
        if flag==len(temp):
            upr+=1
        # count the occurence of ta in cl -> blw 'below'
        for u in ta:
            if u in c:
                blwFlag+=1
            else:
                blwFlag=0
        if blwFlag == len(ta):
            blw+=1
    # conf = upr/blw
    conf = float(upr/blw)
    return conf

def findAssocRule(sl,cl,mc,rl,cv):
    # cleaning
    for s in sl:
        if len(s) == 0 or len(s) == len(sl):
            sl.remove(s)
    print('{}'.format(sl))

    # membentuk calon aturan asosiasi
    print('Configuring association rules : ')
    # elemen yang akan diuji
    for s in sl:
        lengthOfS = len(s)
        for t in sl:
            if len(t) != lengthOfS:
                # check apakah ada nilai s di dalam t
                if len(s) == 1:
                    for u in s:
                        if u not in t:
                            # checking
                            # print(s, t)
                            conf = findConVal(s, t, cl)
                            if conf >= mc:
                                print('{}{} has {} confidence value'.format(s,t,conf))
                                rl.append(list(s))
                                rl.append(list(t))
                                cv.append(conf)
                else:
                    # for v in t :
                    #   if v not in s:
                    #     print(s,t)
                    count = 0
                    for a in s:
                        for b in t:
                            if a == b:
                                count += 1
                            else:
                                count += 0
                    if count == 0:
                        # checking
                        # print(s, t)
                        conf = findConVal(s, t, cl)
                        if conf >= mc:
                            print('{}{} has {} confidence value'.format(s,t,conf))
                            rl.append(list(s))
                            rl.append(list(t))
                            cv.append(conf)

    # print(rl)
    return rl,cv

def findConfidence(ni,cl, mc):
    # list of rules
    rl = list()
    # list of confidence value
    confVal = list()
    # make sublist (himpunan bagian)
    sl = makeSublist(ni)
    for s in sl:
        if len(s) == 0 or len(s) == len(ni):
            sl.remove(s)
    print('Sublist : ', sl)
    assocRule = findAssocRule(sl,cl,mc,rl,confVal)
    return rl,confVal

def makeSublist(ni):
    base = []
    lists = [base]
    for i in range(len(ni)):
        orig = lists[:]
        new = ni[i]
        for j in range(len(lists)):
            lists[j] = lists[j] + [new]
        lists = orig + lists
    return lists

def makeDictio(r, c):
    dictio = dict()
    countMe = 0
    for item in range(0, len(r), 2):
        temp = r[item:item+2]
        # repr() enables list as dictionary key
        dictio[repr(temp)] = c[countMe]*100
        countMe+=1
    return dictio